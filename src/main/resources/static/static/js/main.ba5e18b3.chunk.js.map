{"version":3,"sources":["component/commonService/myAPI.js","component/Login/LoginService.js","component/commonService/StringConst.js","component/commonService/authenticationService.js","component/commonService/IntervalService.js","component/Login/LoginComponent.js","component/Lesson/LessonComponent.js","component/commonService/toastConfig.js","component/Course/CourseComponent.js","component/Title/title-component.js","component/Home/HomeComponent.js","component/NotFound/NotFoundComponent.js","component/DetailComponent/Detail.js","component/Register/RegisterService.js","component/Register/Register.js","component/ResigterSuccess/RegisterSuccess.js","component/RouterURL/PrivateRouteURL.js","component/RouterURL/RouterURLComponent.js","component/Nav/NavigationComponent.js","App.js","serviceWorker.js","index.js"],"names":["axiosInstance","axios","create","baseURL","headers","interceptors","request","use","sessionStorage","getItem","LoginService","login","user","myAPI","post","publicPrefix","JSON","stringify","refreshToken","token","createContext","React","Component","AuthContext","useContext","AuthenticationProvider","props","state","currentUser","Provider","value","this","displayToken","console","log","appToken","setState","children","IntervalService","intervalRefreshToken","expirationDate","timeOut","Date","getTime","setInterval","then","response","resData","data","setItem","catch","err","LoginComponent","isRedirectToReffer","handleLogin","bind","handleChangeInput","userName","passWord","event","key","target","name","context","preventDefault","error","from","location","pathname","to","className","Consumer","onSubmit","type","onChange","placeholder","Lesson","createElement","lessonsName","globalOption","position","toast","POSITION","TOP_CENTER","autoClose","draggable","msg","options","Course","handleClick3","register","userNameRef","createRef","handleToogleOutline","handleClickTitle","isShowOutline","courseBody","isBlocking","reDirectToRegisterPage","alert","input","usernameValue","current","onChangeTitle","length","free","onClick","handleClick1","handleClick2","setIsBlockingState","ref","outline","lessonesElm","lessons","map","when","message","time","courseId","showButtonFree","Title","mainTitle","subTitle","HomeComponent","handleChangeTitle","newTitle","elmCourse","courseData","item","index","id","desc","NotFoundComponent","Detail","match","params","cid","RegisterService","registerUser","Register","txtUserName","txtFullName","txtEmail","isRedirectToSuccessPages","handleInputChange","handleSubmitRegisterForm","fullName","email","pathName","htmlFor","disabled","RegisterSuccess","password","PrivateRouteURL","component","rest","render","RouterURLComponent","exact","path","NavComponent","App","restoreInterval","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba5e18b3.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseURL = '/api';\n\nconst axiosInstance = axios.create({\n    baseURL: baseURL,\n    headers: {\"content-type\": \"application/json; charset=utf-8\"}\n});\n\naxiosInstance.interceptors.request.use((request) => {\n    if(sessionStorage.getItem('token')) {\n        request.headers['x-token'] = \"Bearer \" + sessionStorage.getItem('token');\n    }\n    return request;\n})\n\n// axiosInstance.interceptors.response.use(response => {\n//     return response;\n// }, err => {\n//     return new Promise((resolve, reject) => {\n//         const originalReq = err.config;\n//         if ( err.response.status === 401 && sessionStorage.getItem('token'))\n//         {\n//             originalReq._retry = true;\n\n//             let res = fetch(baseURL + '/public/refresh', {\n//                 method: 'POST',\n//                 cache: 'no-cache',\n//                 credentials: 'same-origin',\n//                 headers: {\n//                     'content-Type': 'application/json',\n//                 },\n//                 redirect: 'follow',\n//                 referrer: 'no-referrer',\n//                 body: sessionStorage.getItem(\"token\"),\n//             }).then(response => response.json()).then (response => {\n//                 if(response.token) {\n//                     sessionStorage.setItem('token', response.token);\n//                     originalReq.headers['x-token'] = response.token;\n//                     return axios(originalReq);\n//                 }\n//             });\n\n\n//             resolve(res);\n//         }\n\n\n//         return Promise.reject(err);\n//     });\n// });\nexport default axiosInstance;","import * as stringConstant from '../commonService/StringConst';\nimport myAPI from '../commonService/myAPI';\n\nconst LoginService = {\n    login(user) {\n        return myAPI.post(stringConstant.LOGIN_URL, JSON.stringify(user))\n        // return $.ajax({\n        //     type: \"POST\",\n        //     url: stringConstant.LOGIN_URL,\n        //     data:  JSON.stringify(user),\n        //     dataType: \"json\",\n        //     contentType: \"application/json; charset=utf-8\"\n        // });\n    },\n    refreshToken() {\n        let token = sessionStorage.getItem('token');\n        if(token) {\n            return myAPI.post(stringConstant.REFRESH_URL, token);\n        }\n    }\n}\n\nexport default LoginService;","\nconst publicPrefix = \"/public\";\nexport const COURSE_URL = publicPrefix + \"/name\";\nexport const LOGIN_URL = publicPrefix + \"/login\";\nexport const REFRESH_URL = publicPrefix + \"/refresh\";\nexport const REGISTER_URL = publicPrefix + \"/registerUser\";","import React from 'react';\n\nconst { createContext, Component, useContext } = React;\nexport const AuthContext = createContext(null);\n\nexport default class AuthenticationProvider extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            token: null,\n            currentUser: null,\n        }\n    }\n    \n    render() {\n        return (\n            <AuthContext.Provider value={{\n                state: this.state,\n                displayToken: () => {\n                    console.log(\"Token: \" + this.state.token);\n                },\n                login: (currentUser, appToken) => {\n                    this.setState ({\n                        token: appToken.token,\n                        currentUser: currentUser\n                    });\n                }\n            }}>\n                {this.props.children}\n            </AuthContext.Provider>\n        );\n    }\n}\n\nexport const useAuth = () => {\n    return useContext(AuthContext);\n}; \n\n","import LoginService from '../Login/LoginService';\n\nconst threshold = 1 * 60 * 1000;\nconst IntervalService = {\n    intervalRefreshToken(expirationDate) {\n        let timeOut = expirationDate - new Date().getTime() - (1 * 60 * 1000);\n        timeOut = threshold > timeOut ? threshold : timeOut;\n        console.log(timeOut);\n        setInterval(() => {\n            LoginService.refreshToken()\n                .then(response => {\n                    let resData = response.data;\n                    console.log('new Token: ' + resData.token);\n                    console.log('ntokenExpirationTime: ' + resData.expirationDate);\n                    sessionStorage.setItem('token', resData.token);\n                    sessionStorage.setItem('tokenExpirationTime', resData.expirationDate)\n                })\n                .catch(err => {\n                    console.log(err);\n                })\n        }, timeOut);\n    }\n}\n\nexport default IntervalService;","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport LoginService from './LoginService'\nimport { AuthContext } from '../commonService/authenticationService';\nimport IntervalService from '../commonService/IntervalService'\n\nclass LoginComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isRedirectToReffer: false\n        }\n        this.handleLogin = this.handleLogin.bind(this);\n        this.handleChangeInput = this.handleChangeInput.bind(this);\n        this.state = {\n            userName: null,\n            passWord: null,\n        }\n    }\n\n    handleChangeInput(event) {\n        const key = event.target.name;\n        const value = event.target.value;\n        this.setState({\n            [key]: value\n        })\n    }\n\n    refreshToken(expirationDate) {\n        IntervalService.intervalRefreshToken(expirationDate);\n    }\n\n    handleLogin(event, context) {\n        event.preventDefault();\n        let user = {\n            passWord: this.state.passWord,\n            userName: this.state.userName\n        }\n        LoginService.login(user)\n        .then(response => {\n            let token = response.data;\n            context.login(user.userName, token);\n            sessionStorage.setItem('token', token.token);\n            sessionStorage.setItem('tokenExpirationTime', token.expirationDate);\n            this.refreshToken(token.expirationDate);\n            context.displayToken();\n            this.setState({\n                isRedirectToReffer: true,\n            })\n        })\n        .catch(error => {\n            console.log(error);\n        });\n\n        \n    }\n    \n\n    render() {\n\n        const {isRedirectToReffer} = this.state;\n        const {from} = this.props.location.state || {from: {pathname: \"/\"}}\n\n        if(isRedirectToReffer) {\n            return <Redirect to={from.pathname}/>\n        } else {\n            return (\n                <div className=\"simple-login-container\">\n                    <h2>Login Form</h2>\n                    <AuthContext.Consumer>\n                        {(context) => {\n                            let loginFormElement = <form onSubmit={(event)=>this.handleLogin(event, context)}>\n                                                        <div className=\"row\">\n                                                            <div className=\"col-md-12 form-group\">\n                                                                <input name=\"userName\" type=\"text\" onChange={(event) => this.handleChangeInput(event)} className=\"form-control\" placeholder=\"Username\" />\n                                                            </div>\n                                                        </div>\n                                                        <div className=\"row\">\n                                                            <div className=\"col-md-12 form-group\">\n                                                                <input name=\"passWord\" type=\"password\" onChange={(event) => this.handleChangeInput(event)} placeholder=\"Enter your Password\" className=\"form-control\" />\n                                                            </div>\n                                                        </div>\n                                                        <div className=\"row\">\n                                                            <div className=\"col-md-12 form-group\">\n                                                                <button type=\"submit\" className=\"btn btn-block btn-login\">Login</button>\n                                                            </div>\n                                                        </div>\n                                                    </form>\n                             return loginFormElement;\n                        }}\n                    </AuthContext.Consumer>\n                   \n                </div>\n                );\n        }\n    }\n}\n\nexport default LoginComponent;","import React, { Component } from 'react';\n\nclass Lesson extends Component {\n  render() {\n    return (\n      React.createElement(\"li\", {className: \"list-group-item\"}, this.props.lessonsName)\n    )\n  };\n};\n\nexport default Lesson;\n","import { toast } from 'react-toastify';\nconst globalOption = {\n    position: toast.POSITION.TOP_CENTER,\n    autoClose: 3000,\n    draggable: false,\n}\nexport default {\n    success(msg, options = {}) {\n        return toast.success(msg, {\n            // Merge additionals options\n            ...options,\n            ...globalOption\n        });\n    },\n    error(msg, options = {}) {\n        return toast.error(msg, {\n            ...options,\n            ...globalOption\n        });\n    },\n    warn(msg, options = {}) {\n        return toast.error(msg, {\n            ...options,\n            ...globalOption\n        });\n    },\n    info(msg, options = {}) {\n        return toast.error(msg, {\n            ...options,\n            ...globalOption\n        });\n    }\n}","import React, { Component } from 'react';\nimport Lesson from '../Lesson/LessonComponent';\nimport CourseService from './CourseService.js';\nimport { Link, Prompt, Redirect } from 'react-router-dom';\nimport toast from '../commonService/toastConfig'\n\nclass Course extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleClick3 = this.handleClick3.bind(this);\n        this.register = this.register.bind(this);\n        this.userNameRef = React.createRef();\n        this.handleToogleOutline = this.handleToogleOutline.bind(this);\n        this.handleClickTitle = this.handleClickTitle.bind(this);\n        this.state = {\n            isShowOutline: false,\n            courseBody: [],\n            isBlocking: false, \n            reDirectToRegisterPage: false\n        }\n    }\n    \n\n    handleClick1() {\n        alert(\"click1\");\n    }\n\n    handleClick2(input) {\n        alert(input);\n    }\n    \n    handleClick3() {\n        alert(this.props.name);\n    }\n\n    register(event) {\n        let usernameValue = this.userNameRef.current.value;\n        event.preventDefault();\n        //event.target.reset();\n        if(usernameValue) {\n            this.setState({\n                isBlocking: false,\n                reDirectToRegisterPage: true\n            });\n        } else {\n            toast.error(\"Cannot leave username!!\");\n        }\n  \n    }\n\n    handleToogleOutline() {\n        this.setState({\n            isShowOutline: !this.state.isShowOutline\n        });\n    }\n\n    componentWillMount() {\n        // CourseService.getCourseContent(\"abc\").then(response => {\n        //         console.log(response)\n        //     }).catch(error => {\n        //         console.log(error);\n        //     }) ;\n    }\n\n    handleClickTitle() {\n        this.props.onChangeTitle(this.props.name);\n    }\n\n    setIsBlockingState(event) {\n        this.setState({\n            isBlocking: event.target.value.length > 0\n        });\n    }\n\n    showButtonFree() {\n        const isFree = this.props.free;\n        if(isFree) {\n            return  (\n                <div className=\"btn-group\">\n                    <button type=\"button\" onClick={this.handleClick1} className=\"btn btn-danger\">Left</button>\n                    <button type=\"button\" onClick={() => this.handleClick2(\"View 2\")} className=\"btn btn-warning\">Middle</button>\n                    <button type=\"button\" onClick={this.handleClick3} className=\"btn btn-info\">Right</button>\n                    <button type=\"button\" onClick={this.handleClickTitle} className=\"btn btn-success\">ChangeTitle</button>\n                </div>\n            )\n        } else {\n            return(\n                <form onSubmit={(event) => this.register(event)}>\n                    <div className=\"input-group\">\n                        <span className=\"input-group-btn\">\n                            <button  className=\"btn btn-info\" type=\"submit\">Register!</button>\n                        </span>\n                        <input type=\"text\" onChange={(event) => this.setIsBlockingState(event)} className=\"form-control\" placeholder=\"UserName\" ref={this.userNameRef}/>\n                    </div>\n                </form>\n                \n            )\n        }\n    }\n\n    render() {\n        let outline;\n        if(this.state.reDirectToRegisterPage) {\n            return (<Redirect to={\"/register/\" + this.userNameRef.current.value}/>);\n        }\n        if(this.state.isShowOutline) {\n            const lessonesElm = this.props.lessons.map((value, key) => {\n                return <Lesson key={key} lessonsName={value.name}></Lesson>\n            });\n            outline =   <ul className=\"list-group\">\n                            {lessonesElm}\n                        </ul>;\n        }\n        return (\n            <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n            <Prompt when={this.state.isBlocking} message={location => `Are you sure you want to go to ${location.pathname}`}/>\n                <div className=\"panel panel-info\">\n                    <div className=\"panel-heading\">\n                        <h3 className=\"panel-title\">{this.props.name}</h3>\n                    </div>\n\n                    <div className=\"panel-body\">\n                        <p>{this.props.time}</p>\n                        <p>{this.props.children}</p>\n                        <div className=\"btn-group\">\n                            <p>\n                                <button type=\"button\" onClick={this.handleToogleOutline} className=\"btn btn-success\">Toogle outline</button>\n                                <Link to={\"/detail/\" + this.props.courseId} className=\"btn btn-default\">See details</Link>\n                            </p>\n                        </div>\n                        {outline}\n                    </div>\n                    <div className=\"panel-footer\">\n                        {this.showButtonFree()}\n                    </div>\n                </div>\n            </div>\n        )\n    };\n};\n\nexport default Course;\n","import React, { Component } from 'react';\n\nclass Title extends Component {\n  \n  render() {\n    return (\n      <div className=\"page-header\">\n        <h1>{this.props.mainTitle}\n          <br/>\n          <small>{this.props.subTitle}</small>\n        </h1>\n      </div>\n    )\n  };\n};\n\nexport default Title;\n","import React, { Component } from 'react';\nimport Course from '../Course/CourseComponent';\nimport Title from '../Title/title-component';\nimport courseData from '../mockData/course.json'\n\nclass HomeComponent extends Component {\n\n  constructor(props) {\n    super(props);\n    this.handleChangeTitle = this.handleChangeTitle.bind(this);\n    this.state = {\n      mainTitle: \"Main Title\",\n      subTitle: \"Sub Title\"\n    }\n  }\n  \n\n  handleChangeTitle(newTitle) {\n    this.setState ({\n      mainTitle: newTitle,\n      subTitle: newTitle\n    })\n  }\n\n  render() {\n    const items = courseData;\n\n    const elmCourse = items.map((item, index) =>\n        <Course key={index} courseId={item.id} name={item.name} time={item.time} free={item.free} lessons={item.lessons} onChangeTitle={(newTitle) => this.handleChangeTitle(newTitle)}> {item.desc} </Course>\n      );\n    return (\n      <div>\n        <Title mainTitle={this.state.mainTitle} subTitle = {this.state.subTitle}/>\n        <div className=\"row\">\n          {elmCourse}\n        </div>\n      </div> \n\n    )  \n  };\n};\n\n\n\n\n\n\n\nexport default HomeComponent;\n","import React, { Component } from 'react';\n\nclass  NotFoundComponent extends Component {\n    render() {\n        return (       \n            <div className=\"page-header\">\n            <h1>Not found 404</h1>\n            </div>\n        );\n    }\n}\n\nexport default  NotFoundComponent;","import React, { Component } from 'react';\n\nclass Detail extends Component {\n    render() {\n        let courseId = this.props.match.params.cid;\n        return (\n            <div>\n                <div className=\"panel panel-info\">\n                    <div className=\"panel-heading\">\n                            <h3 className=\"panel-title\">{courseId}</h3>\n                    </div>\n                    <div className=\"panel-body\">\n                            \n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Detail;","import myAPI from '../commonService/myAPI';\nimport * as stringConstant from '../commonService/StringConst'\n\nconst RegisterService = {\n\n    registerUser(user) {\n        let url = stringConstant.REGISTER_URL;\n        return myAPI.post(url, JSON.stringify(user));\n    }\n\n}\n\nexport default RegisterService;","import React, { Component } from 'react';\nimport {Prompt, Redirect} from 'react-router-dom';\nimport RegisterService from './RegisterService'\n\nclass Register extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            txtUserName: this.props.match.params.userName,\n            txtFullName: null,\n            txtEmail: null,\n            isBlocking: false,\n            isRedirectToSuccessPages: false,\n            response: null\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmitRegisterForm = this.handleSubmitRegisterForm.bind(this);\n    }\n\n    handleSubmitRegisterForm(event) {\n        event.preventDefault();\n        let user = {\n            name: this.state.txtUserName,\n            fullName: this.state.txtFullName,\n            email: this.state.txtEmail,\n        }\n        RegisterService.registerUser(user)\n            .then (response => {\n                console.log(response);\n                this.setState({\n                    isRedirectToSuccessPages: true,\n                    response: response\n                })\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n\n    handleInputChange(event) {\n        this.setState({\n            isBlocking: event.target.value.length > 0\n        })\n        const target = event.target;\n        const name = target.name;\n        const value = target.value;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    render() {\n        if(this.state.isRedirectToSuccessPages) {\n            let pathName = \"/registerSuccess/\" + this.state.txtUserName;\n            let data = this.state.response.data;\n            return (<Redirect to={{\n                pathname: pathName,\n                state: {\n                    response: data\n                }\n            }}/>);\n        }\n        const userName = this.props.match.params.userName;\n        return (\n            <div>\n                <Prompt when={this.state.isBlocking} message={location => `Are you sure you want to go to ${location.pathname}`}/>\n                <form onSubmit={(event) => this.handleSubmitRegisterForm(event)}>\n                    <legend>Register Form For User: {userName}</legend>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"txtUserName\">User Name</label>\n                        <input onChange={(event) => this.handleInputChange(event)} type=\"text\" className=\"form-control\" name=\"txtUserName\" placeholder=\"User Name\" value={userName} disabled/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"txtFullName\">Full Name</label>\n                        <input onChange={(event) => this.handleInputChange(event)} type=\"text\" className=\"form-control\" name=\"txtFullName\" placeholder=\"Full Name\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"txtEmail\">Email</label>\n                        <input onChange={(event) => this.handleInputChange(event)} type=\"email\" className=\"form-control\" name=\"txtEmail\" placeholder=\"Email\" />\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                </form>\n            </div>\n           \n        )\n    }\n}\n\nexport default Register;","import React, { Component } from 'react';\n\nclass  RegisterSuccess extends Component {\n    render() {\n        const userName = this.props.match.params.userName;\n        const password = this.props.location.state.response;\n        return (       \n            <div>\n                <div className=\"page-header\">\n                    <h1>Register Success!</h1>\n                </div>\n                <div className=\"panel panel-info\">\n                    <div className=\"panel-heading\">\n                        <h3 className=\"panel-title\">Login Information</h3>\n                    </div>\n                    <div className=\"panel-body\">\n                        <div className=\"table-responsive\">\n                            <table className=\"table table-bordered table-hover\">\n                            <thead>\n                                <tr>\n                                    <th>userName</th>\n                                    <th>Password</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>{userName}</td>\n                                    <td>{password}</td>\n                                </tr>\n                            </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default  RegisterSuccess;","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\n\n\nconst PrivateRouteURL = ({component: Component, ...rest}) => (\n    <Route {...rest} render={(props) =>(\n        (sessionStorage.getItem('token')) \n        ? (<Component {...props}/>)\n        :<Redirect to={{\n            pathname: \"/login\",\n            state: {from: props.location}\n        }}/>\n    )}/>\n);\n\nexport default PrivateRouteURL;","import React, { Component } from 'react';\nimport {Route, Switch } from 'react-router-dom';\nimport LoginComponent from '../Login/LoginComponent';\nimport HomeComponent from '../Home/HomeComponent';\nimport NotFoundComponent from '../NotFound/NotFoundComponent';\nimport Detail from '../DetailComponent/Detail';\nimport Register from '../Register/Register';\nimport RegisterSuccess from '../ResigterSuccess/RegisterSuccess';\nimport PrivateRouteURL from './PrivateRouteURL';\n\nclass RouterURLComponent extends Component {\n    render() {\n        return (\n            <div>\n                <Switch>\n                    <Route exact path=\"/\" component={HomeComponent}></Route>\n                    <Route path=\"/login\" component={LoginComponent}></Route>\n                    <Route path=\"/register/:userName\" component={Register}/>\n                    <Route path=\"/registerSuccess/:userName\" component={RegisterSuccess}/>\n                    <PrivateRouteURL path=\"/detail/:cid\" component={Detail}/>\n                    \n                    <Route component={NotFoundComponent}/>\n                </Switch>\n            </div>\n        );\n    }\n}\n\n\nexport default RouterURLComponent;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass NavComponent extends Component {\n    render() {\n        return (\n            <div className=\"navbar\">\n                <ul className=\"nav navbar-nav\">\n                    <li className=\"active\">\n                        <Link to=\"/\">Home</Link>\n                    </li>\n                    <li className=\"active\">\n                        <Link to=\"/login\">Login</Link>\n                    </li>\n                </ul>\n            </div>\n        );\n    }\n}\n\n\nexport default NavComponent;","import React, { Component } from 'react';\nimport RouterURLComponent from './component/RouterURL/RouterURLComponent';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport NavComponent from './component/Nav/NavigationComponent';\nimport AuthenticationProvider from './component/commonService/authenticationService';\nimport IntervalService from './component/commonService/IntervalService'\nimport { ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.restoreInterval();\n  }\n\n  restoreInterval() {\n    console.log(\"restoreInterval\");\n    if(sessionStorage.getItem('token')) {\n      IntervalService.intervalRefreshToken(sessionStorage.getItem('tokenExpirationTime'));\n    }\n  }\n\n  render() {\n    return (\n      <AuthenticationProvider>\n        <Router>\n          <NavComponent/>\n          <RouterURLComponent/>\n          <ToastContainer />\n        </Router>\n      </AuthenticationProvider>\n    )  \n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}