version: "3"
services:
  nginx:
    image: nginx
    container_name: proxy-server
    networks:
      - reverseproxy
    entrypoint: ["nginx","-g","daemon off;"]
    ports:
      - 80:80
    volumes:
      - ./nginxConfig/nginx:/etc/nginx/conf.d
      - ./nginxConfig/nginx/log:/var/log/nginx
    depends_on:
      - backend
      - backend2
  backend:
    image: nptn90/reactdemo:0.0.2-SNAPSHOT
    container_name: backend
    networks:
      - server1
      - reverseproxy
      - dbserver
    depends_on:
      - my-db
    environment: 
      ENVIROMENT: docker
      DATABASE: mysql
      DB_USERNAME: root
      DB_PASSWORD: Matkhau1990@
      DB_DIALEC: org.hibernate.dialect.MySQL5Dialect
      DATABASE_URL: jdbc:mysql://docker-mysql:3306/demoreactjs
      SERVER_NAME: backend
  backend2:
    image: nptn90/reactdemo:0.0.2-SNAPSHOT
    container_name: backend2
    networks:
      - server2
      - reverseproxy
      - dbserver
    depends_on:
      - my-db
    environment: 
      ENVIROMENT: docker
      DATABASE: mysql
      DB_USERNAME: root
      DB_PASSWORD: Matkhau1990@
      DB_DIALEC: org.hibernate.dialect.MySQL5Dialect
      DATABASE_URL: jdbc:mysql://docker-mysql:3306/demoreactjs
      SERVER_NAME: backend2
  my-db: 
    image: mysql:5.7
    networks:
      - dbserver
      - reverseproxy
    container_name: docker-mysql
    restart: always
    environment:
      MYSQL_DATABASE: 'demoreactjs'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'root'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'Matkhau1990@'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'Matkhau1990@'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3305:3306'
      # Where our data will be persisted
    volumes:
      - volume-db:/var/lib/mysql
    healthcheck: 
      test: "/usr/bin/mysql --user=root --password=Matkhau1990@--execute \"SHOW DATABASES;\""
      interval: 30s
  dockergen:
    image: jwilder/docker-gen
    depends_on:
      - nginx
    networks:
      - reverseproxy
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginxConfig/nginx:/etc/nginx/conf.d
    command: >
      -config /etc/nginx/conf.d/docker-gen.cfg
# Names our volume
volumes:
  volume-db:
  proxy-volume:
networks:
  reverseproxy: 
  server1: 
  server2:
  dbserver: 